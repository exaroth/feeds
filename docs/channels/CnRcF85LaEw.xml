<?xml version="1.0" encoding="utf-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Frontend</title><link>https://konrad.website/feeds/</link><description></description><item><title>It&apos;s time to go ESM-only</title><link>https://javascriptweekly.com/issues/723</link><author></author><category>Javascript Weekly</category><category>dev</category><category>frontend</category><pubDate>Fri, 14 Feb 2025 00:00:00 +0000</pubDate><source url="https://javascriptweekly.com/">JavaScript Weekly</source><content:encoded><![CDATA[ü§Ø Pfft, vehicle data is a joke without CarsXE. API goes brrrrr. VIN decoding, plate lookup, market value reports. Get¬†Serious!]]></content:encoded></item><item><title>Designer Spotlight: Jhosue Mesias</title><link>https://tympanus.net/codrops/2025/02/13/designer-spotlight-jhosue-mesias/</link><author>Jhosue Mesias</author><category>Codrops blog</category><category>dev</category><category>frontend</category><enclosure url="https://codrops-1f606.kxcdn.com/codrops/wp-content/uploads/2025/01/maison-lumiere-vid.mp4?x25555" length="" type=""/><pubDate>Thu, 13 Feb 2025 14:21:09 +0000</pubDate><source url="https://tympanus.net/codrops">Codrops</source><content:encoded><![CDATA[Exploring the art of digital design with Jhosue Mesias‚Äîpushing boundaries, crafting experiences, and redefining creativity.]]></content:encoded></item><item><title>Building Efficient Three.js Scenes: Optimize Performance While Maintaining Quality</title><link>https://tympanus.net/codrops/2025/02/11/building-efficient-three-js-scenes-optimize-performance-while-maintaining-quality/</link><author>Niccol√≤ Fanton</author><category>Codrops blog</category><category>dev</category><category>frontend</category><enclosure url="https://codrops-1f606.kxcdn.com/codrops/wp-content/uploads/2025/02/Area-1.mp4?x25555" length="" type=""/><pubDate>Tue, 11 Feb 2025 14:38:37 +0000</pubDate><source url="https://tympanus.net/codrops">Codrops</source><content:encoded><![CDATA[A comprehensive look at how to optimize Three.js scenes using Fiber, Drei, and advanced tools, ensuring smooth performance while retaining high-quality visuals.]]></content:encoded></item><item><title>Micro Frontends with Angular and Native Federation</title><link>https://blog.angular.dev/micro-frontends-with-angular-and-native-federation-7623cfc5f413?source=rss----447683c3d9a3---4</link><author>Manfred Steyer</author><category>Angular official</category><category>dev</category><category>official</category><category>frontend</category><pubDate>Mon, 10 Feb 2025 15:02:31 +0000</pubDate><source url="https://blog.angular.dev/?source=rss----447683c3d9a3---4">Angular Blog - Medium</source><content:encoded><![CDATA[Enterprise-scale software systems are often implemented by several cross-functional teams. To enable such teams to provide new features efficiently, it is desirable to minimize the need for coordination between them. This calls for a modularization that verticalizes the system into low-coupled areas individual teams can take care¬†of.There are several possibilities for implementing such high-level modules (also called verticals). For instance, they can be implemented using a respective folder structure or in the form of several libraries in a Monorepo. Micro Frontends go one step further and designate a separate application for each vertical. This architectural style promises several advantages, such as a high amount of team autonomy, but it also comes with numerous challenges.The first part of this article provides a critical overview of the benefits and drawbacks of Micro Frontends in the space of single-page applications. The second part discusses how such an architecture can be implemented with Native Federation, a community project built upon web standards that provide close integration with the Angular¬†CLI.Motivation Behind Micro FrontendsLike Micro Services, Micro Frontends promise several advantages, both technically and with respect to the organization. As applying Micro Frontend architectures results in several smaller applications, testing, performance tuning, and isolating faults in one part of the overarching system becomes more effortless, according to several¬†sources.However, the increased team autonomy was the main reason for applying this architectural style in the numerous cases I was involved in as a consultant. Individual teams are not blocked by waiting for other teams and can deploy separately anytime. This might not be a significant concern in a vast number of projects. Still, as soon as we talk about multi-team projects in a corporate environment with long communication paths and decision times, this aspect quickly becomes vital for the project‚Äôs success.Teams can also make their own decisions that best fit their goals‚Ää‚Äî‚Ääarchitecturally and technology-wise. Mixing multiple client-side frameworks in the same application is considered an anti-pattern and should be avoided. However, it can help to create a migration path over to a new stack in the long run. The concern in corporate environments is that we find software solutions that usually outlive the average technology stackSince Micro Frontends result in separate build processes, combining them with incremental builds, where only changed applications need to be rebuilt, has a massive potential for build-time improvements. For instance, the well-known Nx build system provides this option. Interestingly, this feature can also be used without applying other aspects such as aligning teams with individual applications or separate deployments. There is debate about whether leveraging this tempting option automatically leads to micro frontend architectures.A system consisting of several smaller applications can provide further organizational advantages: It‚Äôs easier to onboard new members and scale the development by adding further micro frontends. Team autonomy also leads to faster release¬†cycles.Challenges to keep in¬†mindEvery architectural decision has consequences that need to be evaluated, and Micro Frontends are no exception. Besides the positive consequences outlined above, there are also several negative ones to consider.For instance, individually developed Micro Frontends can diverge in UI/UX, leading to an inconsistent appearance. Also, loading several applications increases the number of bundles that need to be downloaded, adversely affecting loading times and increasing the memory pressure.Splitting an application into low-coupled parts might be a best practice in general. However, it is often hard to define the boundaries between verticals clearly enough to implement them as individual applications. Also, while having several small applications at first glance simplifies the implementation, integrating them into an overarching solution brings additional complexity.This leads to one of the biggest challenges I have seen in practice: we are moving away from a compile-time integration towards a runtime integration. This has severe consequences because we cannot easily foresee problems that might arise when individually developed and deployed applications start interacting at runtime. Besides the chance of technical conflicts, we also have to see that the current generation of SPA frameworks has not been built with such an operation mode in¬†mind.Instead, modern SPA frameworks, especially Angular, have been developed to focus on compile time optimizations. A powerful compiler leverages type checks to identify technical conflicts and emits efficient source code optimized for tree-shaking. Furthermore, the CLI in the Angular space provides a highly optimized build process. An off-label usage necessary for implementing Micro Frontends undermines some of these achievements.Angular Does Not Officially Support Micro FrontendsFor all the outlined reasons, the Angular team recommends checking if alternatives, like implementing the individual verticals in Monorepos, which can be compiled together, are suitable. For instance, Google adopted this approach years ago and manages all its products and libraries in a single Monorepo.Of course, there are also ways to compensate for the disadvantages outlined here, and some of them, like establishing a design system to help with a consistent UI/UX or lazy loading individual system parts, might be needed in general. More details on such compensation strategies can be found in this survey of more than 150 Micro Frontend practitioners.All architectural decisions have benefits and drawbacks and should be evaluated with those considerations if you are going to implement a solution. If such an evaluation reveals that Micro Frontends provide more advantages than alternatives for achieving your very goals, the following sections provide you a well-lit path for implementing this architectural pattern with¬†Angular.Micro Frontends with FederationModule Federation is a popular technology for implementing Micro Frontends and sharing dependencies. Shipped initially with webpack 5, it comes with a tooling-agnostic runtime and provides compile-time integration into  and . Besides the usage of the vite dev server, these technologies are currently not supported by the Angular CLI. However, promising community solutions like and AnalogJS allow them to be used with Angular. Nx and my CLI-plugin provide an effortless integration.Module Federation enables an application to load parts of other separately built and deployed applications lazily. The loading application is referred to as the host; the integrated ones are called¬†remotes:Federation, if permitted by the library version, can share dependencies like Angular or RxJS between the host and remotes. There are several configuration options for preventing version mismatches. Since MF can only decide which dependencies to share at runtime, tree-shaking for shared parts is not possible.To inform the host about the remotes and their shared dependencies, Module Federation creates a metadata file, the so-called remote entry, during the build. This file needs to be loaded into the¬†host.To fully decouple the idea of Federation from specific bundlers, I started the project Native Federation several years ago. Its API surface is very similar to that of Module Federation. The focus is on portability and standards like ECMAScript modules and Import Maps. Its compile time acts as a wrapper around existing bundlers. For the communication with the bundler, it uses an exchangeable adapter:The integration into the Angular CLI directly delegates to Angular‚Äôs  that leverages the fast bundler esbuild, and is the foundation for several current features like partial hydration. Because of its architecture, Native Federation can also be ported to further builders or other innovations the CLI might provide in the long¬†run.For integrating Micro Frontends built with Angular‚Äôs webpack-based builder, there is a bridging solution allowing the loading of such remotes into a Native Federation host. This solution enables the gradual adoption of the CLI‚Äôs new  and permits the sharing of dependencies between the two kinds of Federation. One of the features added recently is support for SSR and Hydration, which is vital for performance-critical applications like public portals and web¬†shops.Native Federation for Angular is close to the CLI‚Äôs , but its compilation mode is for shared dependencies differs. While it works well for packages that align with Angular‚Äôs Package Format, which is the case for all libraries built with the CLI, other libraries might provide some challenges, especially older ones that still use CommonJS or older conventions for providing metadata.Using Native Federation in¬†AngularFor the setup Native Federation provides a schematic:ng add @angular-architects/native-federation --project mfe1 --port 4201 --type remoteThe switch  defines the kind of the application. Possible options are , , and . The latter is a host configured with a configuration file (federation manifest) during application start. This manifest informs the application of the locations of the remotes and can be switched out by another manifest during deployment:{    "mfe1" : "http://localhost:4201/remoteEntry.json"The key, in this case, is a short name the host uses to refer to the Micro Frontend. The value is the location of the remote entry with the metadata mentioned above. Alternatively, the manifest can be replaced by a service that informs the host of the current location of all deployed remotes and acts as a Micro Frontend registry.The schematic configures the Native Federation builder delegation to the  and creates a configuration file :const { withNativeFederation, shareAll }     = require('@angular-architects/native-federation/config');module.exports = withNativeFederation({    './Component': './projects/mfe1/src/app/app.component.ts',    ...shareAll({}),    'rxjs/ajax',    'rxjs/testing',    // Add further packages you don't need at runtimeThe configuration assigns a unique name to the remote or host and defines which dependencies to share. Instead of providing an exhaustive list of all the dependencies to share, the configuration uses the helper function , which adds all dependencies found in the project‚Äôs . The skip list is used to opt out of sharing some of them or their secondary entry¬†points.Remotes also define exposed EcmaScript modules that can be loaded into the shell. For this, the  node maps the paths of the modules to short names such as¬† in the example¬†shown.The schematic also adds code to initialize Native Federation to the . For the host, this code points to the federation manifest:import { initFederation } from '@angular-architects/native-federation';initFederation('federation.manifest.json')  .catch(err => console.error(err))  .then(_ => import('./bootstrap'))  .catch(err => console.error(err));After initializing federation, the file , also created by the schematic, is loaded. It contains the usual code for bootstrapping Angular, e.g., via  when the application uses Standalone Components.To load a component or routing configuration exposed by a remote, traditional lazy loading is combined with Native Federation‚Äôs  function:import { loadRemoteModule } from '@angular-architects/native-federation';export const APP_ROUTES: Routes = [  [...]    path: 'flights',      loadRemoteModule('mfe1', './Component').then((m) => m.AppComponent),];Here,  is the key defined in the manifest, and¬† points to the respective exposed module in the remote‚Äôs federation configuration.More information on Native Federation can be found in this blog article and in the project‚Äôs readme, which also links to a tutorial.Micro Frontends promise significant advantages for enterprise-scale applications, such as enhanced team autonomy and independent deployment. These benefits make this architectural style particularly appealing in multi-team corporate environments where streamlined communication and rapid development cycles are critical. Additionally, they support gradual migration to new technologies and optimize build times by leveraging incremental builds.However, these advantages come with trade-offs. Micro Frontends can lead to inconsistent UI/UX, increased load times, and complex runtime integrations. Defining clear vertical boundaries and managing inter-application communication add to the challenge. Furthermore, frameworks like Angular, designed for compile-time optimization, face limitations in runtime integration scenarios. The Angular team, therefore, recommends alternatives such as splitting an application into libraries managed within a Monorepo, which aligns better with Angular‚Äôs strengths in type safety and efficient compilation.Module Federation has emerged as a popular solution to address some challenges by enabling lazy loading and dependency sharing. Native Federation builds on these concepts with a focus on standards and portability. It provides a seamless integration into the Angular CLI and its performant esbuild-based , which is also the foundation for advanced features like SSR and hydration.Together with this team at , Manfred Steyer helps companies around the globe establish maintainable Angular-based Architectures. He is a trainer, consultant, and Google Developer Expert (GDE) and writes for O‚ÄôReilly, the German Java Magazin, windows.developer, and Heise Developer. Furthermore, he regularly speaks at conferences.]]></content:encoded></item><item><title>Creating My First Game Prototype in a Browser: The Journey So Far</title><link>https://tympanus.net/codrops/2025/02/10/creating-my-first-game-prototype-in-a-browser-the-journey-so-far/</link><author>Axel Croiz√©</author><category>Codrops blog</category><category>dev</category><category>frontend</category><enclosure url="https://codrops-1f606.kxcdn.com/codrops/wp-content/uploads/2025/02/fox_movement2.mp4?x25555" length="" type=""/><pubDate>Mon, 10 Feb 2025 14:10:43 +0000</pubDate><source url="https://tympanus.net/codrops">Codrops</source><content:encoded><![CDATA[An inside look at the creative process, challenges, and tools behind building a 3D game prototype from scratch.]]></content:encoded></item><item><title>Developer Spotlight: Guillaume Lanier</title><link>https://tympanus.net/codrops/2025/02/07/developer-spotlight-guillaume-lanier/</link><author>Guillaume Lanier</author><category>Codrops blog</category><category>dev</category><category>frontend</category><enclosure url="https://codrops-1f606.kxcdn.com/codrops/wp-content/uploads/2025/01/Project_HP.mp4?x25555" length="" type=""/><pubDate>Fri, 7 Feb 2025 12:48:23 +0000</pubDate><source url="https://tympanus.net/codrops">Codrops</source><content:encoded><![CDATA[Introducing Guillaume Lanier, a Creative & Frontend Developer based in Amsterdam, who crafts immersive digital experiences through innovative 2D/3D graphics and interactive design.]]></content:encoded></item><item><title>Oracle dabbles in some JavaScript comedy</title><link>https://javascriptweekly.com/issues/722</link><author></author><category>Javascript Weekly</category><category>dev</category><category>frontend</category><pubDate>Fri, 7 Feb 2025 00:00:00 +0000</pubDate><source url="https://javascriptweekly.com/">JavaScript Weekly</source><content:encoded><![CDATA[üç™ CookieConsent 3.1 ‚Äì A lightweight, pure JS, GDPR-compliant cookie consent mechanism with which to  meet regulatory¬†requirements.Happy DOM 17.0 ‚Äì Cross-runtime JS implementation of a web browser ¬†UI. Now supports ES¬†modules.get-value 4.0 ‚Äì Use property paths () get a nested value from an object.mp4-muxer 5.2 ‚Äì MP4 multiplexer in pure TypeScript with support for the WebCodecs API, video and¬†audio.Wasp 0.16 ‚Äì Wasp is a Rails-like framework using Node, React &¬†Prisma.RxDB 16.5 ‚Äì Offline-first, reactive database for JS¬†apps.]]></content:encoded></item><item><title>Building a Playful Stop-Motion Crayon Cursor in p5.js</title><link>https://tympanus.net/codrops/2025/02/06/building-a-playful-stop-motion-crayon-cursor-in-p5-js/</link><author>Jorge Toloza</author><category>Codrops blog</category><category>dev</category><category>frontend</category><enclosure url="https://codrops-1f606.kxcdn.com/codrops/wp-content/uploads/2025/01/stop-motion-crayon-cursor-result_smaller.mp4?x25555" length="" type=""/><pubDate>Thu, 6 Feb 2025 10:35:49 +0000</pubDate><source url="https://tympanus.net/codrops">Codrops</source><content:encoded><![CDATA[Create a playful stop-motion crayon cursor effect with p5.brush.js and smooth animations.]]></content:encoded></item><item><title>Players Club: A Free Astro Template for Showcasing Music Artists</title><link>https://tympanus.net/codrops/2025/02/05/players-club-free-astro-template/</link><author>Manoela Ilic</author><category>Codrops blog</category><category>dev</category><category>frontend</category><enclosure url="https://codrops-1f606.kxcdn.com/codrops/wp-content/uploads/2025/02/PlayersClubNav.mp4?x25555" length="" type=""/><pubDate>Wed, 5 Feb 2025 13:14:12 +0000</pubDate><source url="https://tympanus.net/codrops">Codrops</source><content:encoded><![CDATA[Players Club is a free Astro template for showcasing music artists‚Äîan experimental proof of concept built in collaboration with Alex Tkachev.]]></content:encoded></item><item><title>How to Make The Fluffiest Grass With Three.js</title><link>https://tympanus.net/codrops/2025/02/04/how-to-make-the-fluffiest-grass-with-three-js/</link><author>The Ebenezer</author><category>Codrops blog</category><category>dev</category><category>frontend</category><enclosure url="https://codrops-1f606.kxcdn.com/codrops/wp-content/uploads/2025/01/1737385342684984.mp4?x25555" length="" type=""/><pubDate>Tue, 4 Feb 2025 12:55:00 +0000</pubDate><source url="https://tympanus.net/codrops">Codrops</source><content:encoded><![CDATA[A breakdown of the best techniques to create realistic grass in Three.js without killing performance.]]></content:encoded></item><item><title>Building an On-Scroll 3D Circle Text Animation with Three.js and Shaders</title><link>https://tympanus.net/codrops/2025/02/03/building-an-on-scroll-3d-circle-text-animation-with-three-js-and-shaders/</link><author>David Faure</author><category>Codrops blog</category><category>dev</category><category>frontend</category><enclosure url="https://codrops-1f606.kxcdn.com/codrops/wp-content/uploads/2025/01/Amplitude-management-for-animation.mp4?x25555" length="" type=""/><pubDate>Mon, 3 Feb 2025 13:17:08 +0000</pubDate><source url="https://tympanus.net/codrops">Codrops</source><content:encoded><![CDATA[Learn how to create a circular text animation in 3D space using Three.js, shaders, and msdf-text-utils.]]></content:encoded></item><item><title>Nim: A Personal Website Template Built with Motion-Primitives</title><link>https://tympanus.net/codrops/2025/02/01/nim-nextjs-react-tailwind-motion-template/</link><author>ibelick</author><category>Codrops blog</category><category>dev</category><category>frontend</category><enclosure url="https://codrops-1f606.kxcdn.com/codrops/wp-content/uploads/2025/01/nim-text-morph.mp4?x25555" length="" type=""/><pubDate>Sat, 1 Feb 2025 12:00:00 +0000</pubDate><source url="https://tympanus.net/codrops">Codrops</source><content:encoded><![CDATA[Nim is a free, open-source personal website template built with Next.js 15, React 19, Tailwind CSS v4, and Motion-Primitives, featuring subtle, pre-built animations.]]></content:encoded></item><item><title>Developer Spotlight: Quentin Hocd√©</title><link>https://tympanus.net/codrops/2025/01/31/developer-spotlight-quentin-hocde/</link><author>Quentin Hocd√©</author><category>Codrops blog</category><category>dev</category><category>frontend</category><enclosure url="https://codrops-1f606.kxcdn.com/codrops/wp-content/uploads/2025/01/04_tigermilk.mp4?x25555" length="" type=""/><pubDate>Fri, 31 Jan 2025 12:45:00 +0000</pubDate><source url="https://tympanus.net/codrops">Codrops</source><content:encoded><![CDATA[In this spotlight, Quentin Hocd√© shares his passion for creative coding, animations, and bringing interactive experiences to life.]]></content:encoded></item><item><title>A WebAssembly compiler in 192 bytes</title><link>https://javascriptweekly.com/issues/721</link><author></author><category>Javascript Weekly</category><category>dev</category><category>frontend</category><pubDate>Fri, 31 Jan 2025 00:00:00 +0000</pubDate><source url="https://javascriptweekly.com/">JavaScript Weekly</source><content:encoded><![CDATA[ ‚Äî Take your knowledge to the next level with the most loved JavaScript course in the industry. Deepen your understanding of the most important aspects of JavaScript. This highly rated video course goes under the hood, looking at callbacks, higher-order functions, object-oriented JS, and¬†more.]]></content:encoded></item><item><title>Case Study: Gianluca Gradogna ‚Äî Portfolio ‚Äô25</title><link>https://tympanus.net/codrops/2025/01/30/case-study-gianluca-gradogna-portfolio-25/</link><author>Gianluca Gradogna</author><category>Codrops blog</category><category>dev</category><category>frontend</category><enclosure url="https://codrops-1f606.kxcdn.com/codrops/wp-content/uploads/2025/01/Codrops_Video_03.mp4?x42814" length="" type=""/><pubDate>Thu, 30 Jan 2025 14:00:00 +0000</pubDate><source url="https://tympanus.net/codrops">Codrops</source><content:encoded><![CDATA[This case study unveils the journey of creating a personal portfolio, highlighting the creative collaboration between Gianluca Gradogna and Gabriel Norman in bringing the project to life.]]></content:encoded></item><item><title>Particles, Progress, and Perseverance: A Journey into WebGPU Fluids</title><link>https://tympanus.net/codrops/2025/01/29/particles-progress-and-perseverance-a-journey-into-webgpu-fluids/</link><author>Hector Arellano</author><category>Codrops blog</category><category>dev</category><category>frontend</category><enclosure url="https://codrops-1f606.kxcdn.com/codrops/wp-content/uploads/2025/01/Grabacion-de-pantalla-2025-01-05-a-las-18.48.35-1.mov?x44439" length="" type=""/><pubDate>Wed, 29 Jan 2025 13:22:40 +0000</pubDate><source url="https://tympanus.net/codrops">Codrops</source><content:encoded><![CDATA[A reflective journey through years of experimentation and innovation, demonstrating how WebGPU enables the creation of sophisticated, visually striking fluid simulations.]]></content:encoded></item><item><title>10+ Best Web Design Tools &amp; Resources For 2025 (Free &amp; Paid)</title><link>https://tympanus.net/codrops/2025/01/28/best-web-design-tools-2025/</link><author>advertiser</author><category>Codrops blog</category><category>dev</category><category>frontend</category><enclosure url="https://codrops-1f606.kxcdn.com/codrops/wp-content/uploads/2025/01/14-Xstore.mp4?x44439" length="" type=""/><pubDate>Tue, 28 Jan 2025 12:30:00 +0000</pubDate><source url="https://tympanus.net/codrops">Codrops</source><content:encoded><![CDATA[Discover the top web design tools and resources of 2025, tailored for creating innovative, secure, and visually stunning websites with ease.]]></content:encoded></item><item><title>Bun&apos;s on a roll with v1.2</title><link>https://javascriptweekly.com/issues/720</link><author></author><category>Javascript Weekly</category><category>dev</category><category>frontend</category><pubDate>Fri, 24 Jan 2025 00:00:00 +0000</pubDate><source url="https://javascriptweekly.com/">JavaScript Weekly</source><content:encoded><![CDATA[ ‚Äî A fast and flexible DataGrid for building modern web apps. Key features and virtualized rendering are included in the core grid module. Pick & choose special features to keep your app small. Built for JavaScript, extended to Angular, React, and¬†Vue.Wijmo From MESCIUS inc. ]]></content:encoded></item><item><title>JavaScript Temporal is coming</title><link>https://developer.mozilla.org/en-US/blog/javascript-temporal-is-coming/</link><author>brian-smith</author><category>MDN Blog</category><category>dev</category><category>official</category><category>frontend</category><enclosure url="https://developer.mozilla.org/en-US/blog/javascript-temporal-is-coming/featured.png" length="" type=""/><pubDate>Fri, 24 Jan 2025 00:00:00 +0000</pubDate><source url="https://developer.mozilla.org/en-US/blog/">MDN Blog</source><content:encoded><![CDATA[A new way to handle dates and times is being added to JavaScript. Let's take a look at Temporal, what problems it solves, the current state, and what you'll find in the new documentation about it on MDN.
]]></content:encoded></item><item><title>An introduction to building live collaborative JS apps</title><link>https://javascriptweekly.com/issues/719</link><author></author><category>Javascript Weekly</category><category>dev</category><category>frontend</category><pubDate>Fri, 17 Jan 2025 00:00:00 +0000</pubDate><source url="https://javascriptweekly.com/">JavaScript Weekly</source><content:encoded><![CDATA[‚öôÔ∏è Act ‚Äì A Go-powered tool that looks at your repo's GitHub Actions, uses Docker to grab the necessary images, and runs the tasks¬†‚öôÔ∏è Svar ‚Äì A new suite of open source UI components for Svelte, React, and Vue. ]]></content:encoded></item></channel></rss>